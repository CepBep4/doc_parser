from state_manager import ConfigState, SystemState
from config import HandlingProcess, build_structured_prompt
from utils import breakWork, logErrorJson
import datetime
import requests
import json
  
def requestGPT(prompt: str) -> dict:   
    # üîë API-–∫–ª—é—á –¥–ª—è YandexGPT
    API_KEY = "AQVNyQJhwi8hKd4HQqSaQrliecSmTEwj5JQnKZXj"

    # üìÇ Folder ID –¥–ª—è YandexGPT
    FOLDER_ID = "b1g8tsvuq53o5os9bviv"

    # URL –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ YandexGPT
    YANDEX_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è YandexGPT
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.2,
            "maxTokens": "1000"
        },
        "messages": [
            {"role": "system", "text": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON."},
            {"role": "user", "text": prompt}
        ]
    }

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {API_KEY}"
    }

    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT
        response = requests.post(YANDEX_URL, headers=headers, json=data)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        
        response_data = response.json()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ YandexGPT
        raw_text = ""
        if "result" in response_data and "alternatives" in response_data["result"]:
            alternatives = response_data["result"]["alternatives"]
            if alternatives and "message" in alternatives[0]:
                raw_text = alternatives[0]["message"].get("text", "").strip()
        
        if not raw_text:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ
            if "text" in response_data:
                raw_text = response_data["text"].strip()
            elif "message" in response_data:
                raw_text = response_data["message"].strip()
            else:
                # –í—ã–≤–µ–¥–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                raw_text = str(response_data)
        
        if not raw_text or raw_text == "None":
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç markdown –æ–±—Ä–∞–º–ª–µ–Ω–∏—è
        cleaned_text = raw_text.strip()
        if cleaned_text.startswith('```') and cleaned_text.endswith('```'):
            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫
            cleaned_text = cleaned_text[3:-3].strip()
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–µ—Ç–∫–∏ (json, python –∏ —Ç.–¥.)
            if '\n' in cleaned_text:
                first_line = cleaned_text.split('\n')[0].strip()
                if first_line in ['json', 'python', 'javascript']:
                    cleaned_text = '\n'.join(cleaned_text.split('\n')[1:]).strip()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
        try:
            # –ü—Ä—è–º–∞—è –ø–æ–ø—ã—Ç–∫–∞
            return json.loads(cleaned_text)
        except json.JSONDecodeError:
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ä–µ–∑–∞—Ç—å JSON –≤—Ä—É—á–Ω—É—é
            start = cleaned_text.find('{')
            end = cleaned_text.rfind('}')
            if start != -1 and end != -1:
                json_text = cleaned_text[start:end+1]
                return json.loads(json_text)
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤
            start = cleaned_text.find('[')
            end = cleaned_text.rfind(']')
            if start != -1 and end != -1:
                json_text = cleaned_text[start:end+1]
                return json.loads(json_text)
            
            # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return {"raw_response": cleaned_text, "parsed": False}

    except requests.exceptions.RequestException as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT: {e}")
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT: {e}")

def neuroHandler(state: SystemState, config: ConfigState, listFiles: list[HandlingProcess]):
    for p in listFiles:
        try:
            #–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
            if p.status != "ok":
                continue
            
            p.ai = requestGPT(build_structured_prompt(p.text, p.direction))
            if p.ai is None:
                raise BaseException("–ü—É—Å—Ç–æ–π dict –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
            
            #–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            p.updateStatus(
                status="ok",
                date=datetime.datetime.now().isoformat(),
                stage="ai_client",
                comment="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"
            )
            
        except Exception as error:
            #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ log
            logErrorJson(
                p.path,
                "ai_client",
                str(error)
            )
            
            #–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            p.updateStatus(
                status="critical_error",
                date=datetime.datetime.now().isoformat(),
                stage="ai_client",
                error_msg=str(error),
                comment="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"
            )
            
    #–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –µ—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏     
    if "ok" not in [x.status for x in listFiles]:
        state.errors = "–ù–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        breakWork(state)
            
    return listFiles